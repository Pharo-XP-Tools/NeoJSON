(name 'Neo-JSON-Core-SvenVanCaekenberghe.57' message 'Always store #propertyName in NeoJSONPropertyMapping as Symbol. Use this invariant in NeoJSONObjectMapping, specifically in #propertyNamed:ifAbsent: #mapProperty:getter:setter: and #mapInstVar:to: to minimize the number of conversions needed.Add NeoJSONMappingTests>>#testSymbolOrStringInstVarMapping to make sure both String and Symbols are allowed as instance variable mapping specification. ' id '8f26cb9d-ef20-0d00-9ccb-0dac050dd8ac' date '6 February 2018' time '5:43:33.847976 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-marianopeck.56' message '* Make a  more robuts NeoJSONObject >> printOn: * Last 2 small edits for string vs symbol ' id 'dd16df1d-7520-0d00-bd5b-447e0307cbab' date '31 January 2018' time '11:34:41.660838 am' author 'marianopeck' ancestors ((name 'Neo-JSON-Core-marianopeck.55' message '* Added ''collection'' instVar to NeoJSONMappingNotFound and not use ''signaler''. ' id '9527791e-7320-0d00-be53-6ad8006b589b' date '31 January 2018' time '9:11:41.823112 am' author 'marianopeck' ancestors ((name 'Neo-JSON-Core-marianopeck.54' message 'NeoJSON was assuming that #x = ''x'' is always true, which is correct in Pharo, but not so in GemStone, VAST, VW, etc. So we tried to force a #asString in a few places so that regardless of the impementation we are always safe. This might have a small performance (to be later checked via benchmarks). ' id 'c310cc64-6820-0d00-be52-3323006b589b' date '30 January 2018' time '8:23:57.021603 pm' author 'marianopeck' ancestors ((name 'Neo-JSON-Core-marianopeck.53' message 'For portability reasons use `Character cr asString` rather than `String cr`' id 'e1afc10e-6220-0d00-a479-595d0e1160ba' date '30 January 2018' time '12:50:23.697085 pm' author 'marianopeck' ancestors ((name 'Neo-JSON-Core-marianopeck.52' message 'This commits aims to make NeoJSON more portable to other Smalltalk dialects like VAST.* Moved OrderedCollection and SmallDictionary neoJsonOn: to a new separate package  ''Neo-JSON-Pharo-Core''.* Duplicate code from Pharo-specific NotFound to NeoJSONMappingNotFound and make the later subclass from Error (any other Smalltalk have NotFound exception). See NeoJSONMappingNotFound class comment for more details.' id '6b05827e-6020-0d00-a470-708e0e1160ba' date '30 January 2018' time '10:58:28.638268 am' author 'marianopeck' ancestors ((name 'Neo-JSON-Core-marianopeck.51' message 'This commits aims to make NeoJSON more portable to other Smalltalk dialects like VAST.* Moved OrderedCollection and SmallDictionary neoJsonOn: to a new separate package  ''Neo-JSON-Pharo-Core''.* Duplicate code from Pharo-specific NotFound to NeoJSONMappingNotFound and make the later subclass from Error (any other Smalltalk have NotFound exception). See NeoJSONMappingNotFound class comment for more details.' id '26b6eb6e-6020-0d00-a46f-04550e1160ba' date '30 January 2018' time '10:54:07.129344 am' author 'marianopeck' ancestors ((name 'Neo-JSON-Core-MarianoMartinezPeck.50' message 'MonticelloPreparation' id '9d84b6d8-fa1f-0d00-b8c0-f00b00e5ebf6' date '25 January 2018' time '9:42:15.363973 am' author 'MarianoMartinezPeck' ancestors ((name 'Neo-JSON-Core-MarianoMartinezPeck.49' message 'MonticelloPreparation' id 'c85bb7c6-fa1f-0d00-b8bf-775a00e5ebf6' date '25 January 2018' time '9:37:13.429169 am' author 'MarianoMartinezPeck' ancestors ((name 'Neo-JSON-Core-MarianoMartinezPeck.48' message 'MonticelloPreparation' id '1fd55aa9-fa1f-0d00-b8be-da9100e5ebf6' date '25 January 2018' time '9:29:00.826099 am' author 'MarianoMartinezPeck' ancestors ((name 'Neo-JSON-Core-MarianoMartinezPeck.47' message 'MonticelloPreparation' id '25c20ba3-fa1f-0d00-b8bd-455500e5ebf6' date '25 January 2018' time '9:27:14.98062 am' author 'MarianoMartinezPeck' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.46' message 'Fix the NeoJSONWriter>>#writeNil: true option by adding a short circuit to NeoJSONWriter>>nextPut:as: (as reported by Juraj Kubelka)Add #testRectanglePointsWithNil' id 'f412799a-431a-0d00-850e-5c3c05ce5378' date '13 November 2017' time '6:59:13.995868 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.45' message 'merge' id '8601ddc6-7716-0d00-beb9-5e2a04c5ff7e' date '26 September 2017' time '1:33:10.530717 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.44' message 'Implement some missing code in NeoJSONCustomMapping (the writing part of #listOfElementSchema: #listOfType:andElementSchema: #mapWithValueSchema:)Add NeoJSONStreamingWriter>>#writeElementAs:Add NeoJSONMappingTests>>#testDynamicTyping as an example' id 'f1ebeade-2816-0d00-a04c-ae370e598362' date '22 September 2017' time '3:24:51.679449 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.42' message 'Improve error handling and compliance.Added NeoJSONValidation that uses some external positive/negative specificationsAdded NeoJSONReader>>#failIfNotAtEnd to optionally force correct end of input parsing and catch extraneous inputImprove NeoJSONReader>>#parseCharacter error reporting in case of incomplete escapesImprove NeoJSONReader>>#parseListDo: & #parseMapDo: error reportingNeoJSONReader>>#parseNumberExponent (1) add error for missing exponents (2) add errors for too large & too small exponents versus Float limits' id 'bbc9c32b-080d-0d00-a713-b0590189d909' date '29 May 2017' time '11:37:22.389793 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-MaxLeske.41' message '* changed NeoJSONWriter>>writeString: to use #to:do: instead of #do: to improve performance when writing large strings' id 'e525dc7a-f6f4-4107-94d9-621d7ad184c6' date '30 April 2017' time '1:41:23.628708 pm' author 'MaxLeske' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.40' message 'Add NeoJSONObject>>#atPath: and #atPath:put:Add NeoJSONObjectTests>>#testAtPath and #testAtPathPut' id 'c336587e-740a-0d00-b51a-dacd0088e41c' date '26 April 2017' time '4:35:49.433269 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.39' message 'Fix a bug where initial whitespace when reading a string was consumed (thx Max Leske)Patch NeoJSONReader>>#parseString to simply #peekFor: $"' id 'c6e689c2-c106-0d00-9800-d9b20c8d4a06' date '10 March 2017' time '2:05:59.511 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.38' message 'Change NeoJSONObjects'' #doesNotUnderstand: behavour for setters to return self which makes for easier usage.Extend NeoJSONObjects'' class comment' id '9817797c-3dd7-43a5-a936-7964a1effb90' date '3 February 2017' time '3:33:07.073384 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.37' message 'Bugfix to NeoJSONWriter>>#escapeUnicode: [thank you, Tomohiro Oda] code points between 16rFFF and 16rFFFF where encoded wrongly when #asciiOnly was trueAdd high code point string to NeoJSONWriteReadTests>>#testStrings and add new NeoJSONWriteReadAsciiOnlyTests subclass' id '788cd6b1-71ed-474c-b387-e005a7137896' date '24 November 2016' time '10:30:16.165149 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.36' message 'Use an OrderedCollection instead of a some Dictionary to store the properties inside a NeoJSONObjectMapping ' id 'aab6c89f-0fbc-4f3c-8aa9-4da1c71f72b2' date '11 July 2016' time '11:03:30.192353 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.35' message 'Add NeoJSONObjectMapping>>#dictionaryForProperties with hack to cover more Pharo versions' id 'a137c050-87c4-4d1c-89c3-d558cfe78ff5' date '11 July 2016' time '10:23:25.017843 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.34' message 'Use an OrderedDictionary instead of a regular Dictionary to store the properties inside a NeoJSONObjectMapping - this allows the user to control the order of properties while writing, if neededAdd NeoJSONWriterTests>>#testPreservePropertyOrder' id 'ded70581-c06f-4687-936c-11a029a39ba4' date '2 July 2016' time '12:03:08.919979 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.33' message 'Added NeoJSONReader>>#nextListAs: as suggested by Norbert HartlAdded NeoJSONReaderTests>>#testArrayOfPointsUsingNextListAs' id '34aac279-4fef-4476-9201-95a64efaea6f' date '16 March 2016' time '11:24:47.837176 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.32' message 'Added support for characters not in the Basic Multilingual Plane encoding as a UTF-16 surrogate pairSee https://tools.ietf.org/html/rfc7159#section-7' id 'fd9330ff-1b0e-4e0c-b011-defc809a9a9e' date '24 February 2016' time '2:51:06.880365 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.31' message 'New #allowNil option to Object mapping so that null values are accepted and returned as nil when reading a schema using #nextAs: (off by default)Added NeoJSONObjectMapping>>#allowNilAdded NeoJSONReaderTests>>#testAllowNil' id 'fb235526-3c04-4e5f-a543-9a7e9eaaac2a' date '30 December 2015' time '12:31:59.303349 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.30' message 'Add OrderedDictionary>>#neoJsonOn: to write it as a  map (Thx Paul Wilke)' id '9f42a6bd-1b9f-4ecd-99de-d9283fac6920' date '26 August 2015' time '12:42:05.743206 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.29' message 'Added NeoJSONObject, a convencience subclass of Dictionary that mimics some JavaScript behavior' id '4d5a39e4-c7f3-48ee-9366-36d9e45068ce' date '8 September 2014' time '2:26:09.557335 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.28' message 'Added NeoJSONWriter #writeNil property, defaulting to false; when true, nil instance variables will be written as null by NeoJSONPropertyMapping, else they will be skipped' id 'd6927f86-5b87-4ba2-99c1-cfe5b58ed22f' date '28 May 2014' time '8:52:57.799163 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.27' message 'Added NeoJSONWriter>>#newline to write an end of line on the wrapped stream depending on the #newLine: setting' id '5a262fd6-a42d-4102-b554-26e4f1eade3d' date '17 April 2014' time '12:12:47.207836 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.26' message 'Added new feature NeoJSONWriter>>#nextPutAs: symmetrical to NeoJSONReader>>#next:as: More specifically NeoJSONPropertyMapping>>#writeObjectOn: now respects the valueSchema if it exists using NeoJSONStreamingWriter>>#writeKey:value:as: and NeoJSONWriter>>#encodeKey:value:as:Made both the reader and writer blocks in NeoJSONCustomMapping optional with a fallback to default behaviorRefactoring: added NeoJSONMapping abstract superclass above NeoJSONObjectMapping and NeoJSONCustomMapping to better clarify the design' id '41d2075d-bca4-4c08-bdf8-ed0c8da9bcf2' date '24 March 2014' time '12:18:21.026173 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.25' message 'Added basic support for mapping using inheritance when using #neoJonMapping : (see #testObject3)Renamed #new[Custom|Object]MappingFor: to [custom|object]MappingFor: to better reflect the new behaviorThanks  Philippe Back for making these suggestions!' id '3051cd7d-a857-4aee-b5ba-d56a4085517b' date '22 March 2014' time '11:03:31.510538 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.24' message 'New feature: NeoJSONWriter>>#asciiOnly: to escape all non ASCII characters in strings' id '9f2d3ef6-abbb-46c1-bce7-95a6bd8b4954' date '3 September 2013' time '12:21:28.781401 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.23' message 'Added NeoJSONCustomMapping>>#mapWithValueSchema:' id '6d0d538b-6fb1-41ac-92ee-05721924c5c4' date '30 August 2013' time '11:09:17.235312 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.22' message 'Fix more double dots in the source code of #printOn: that hampered Gemstone compatibility (thx Sebastian Heidbrink)' id 'd15895fc-5743-4ec8-b99f-76fa5f72baf4' date '4 July 2013' time '7:25:56.931 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.21' message 'Fix a double dot in the source code of NeoJSONCustomWrapper>>#printOn: that hampered Gemstone compatibility (thx Sebastian Heidbrink)' id '3fcb3755-32a9-4c17-ac08-6721bf37a301' date '4 July 2013' time '6:41:52.665 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.20' message 'Added NeoJSONReader>>#atEnd' id 'afd8e136-e594-4bef-ad4b-7d3bc48fc36e' date '6 March 2013' time '3:24:11.242 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.19' message 'added NeoJSONWriter>>#newLine: to customize the end of line convention when pretty printing' id 'bf3e7e59-8300-44a6-889e-1f866c8d2977' date '10 December 2012' time '5:11:36.655 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.18' message 'minor refactoring using #peekFor:' id 'e1330b1e-87f4-4ea3-b81c-5deb03652c0d' date '3 December 2012' time '11:10:22.335 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.17' message 'modified by accident, not really changed' id 'a18f519f-c220-4ea1-a6bb-163e2c70eab7' date '14 June 2012' time '10:01:07.225 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.16' message 'documented the character stream API being used' id '5ba3bcd2-e7a6-4b07-91af-af04c7f98624' date '13 June 2012' time '4:29:08.628 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.15' message 'bugfix in NeoJSONReader>>#match:do:added examples to class comments' id '89ad4ee7-3035-43af-9d5c-cbbef6bcb3f0' date '13 June 2012' time '2:58:00.219 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.14' message 'extended NeoJSONReader with settable listClass and mapClass as well as a propertyNamesAsSymbols optionextended class and method comments' id '3f749c2c-b53b-4d56-bb65-bfe964b5a69b' date '13 June 2012' time '11:56:19.567 am' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.13' message 'made NeoJSONReader>>parseNumberInteger more strict' id '5233f22a-8653-43c2-8651-bf5fa274b3da' date '12 June 2012' time '4:19:27.63 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.12' message 'introduced some custom exceptions' id 'bb6ec6aa-4e5d-4fac-9aa4-629ea6f068b6' date '12 June 2012' time '3:57:32.274 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.11' message 'major simplification: removed NeoJSON[Composite|List|Map]Mapping, all to be handled by blocks in NeoJSONCustomMappingrenamed forCustom:do: to for:customDo:accessor based mapping to NeoJSONObjectMapping' id '82a72131-e968-4ffe-af32-60085b4ecc67' date '12 June 2012' time '1:36:03.263 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.10' message 'optimized NeoJSONWriter>>#encodeChar: to do minimal work' id 'a684bb8c-d2d0-4a4b-8af2-da24c3f5fda4' date '10 June 2012' time '9:27:46.001 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.9' message 'added NeoJSONTestObject1 with class side #neoJsonMapping: method' id '49129177-ee36-4e4b-890e-314e92f23d76' date '9 June 2012' time '6:56:12.413 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.8' message 'added custom mapping' id 'b02af4e3-7a91-471f-81a0-57db8b43a87d' date '8 June 2012' time '10:09:41.079 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.7' message 'adding valueSchema to propertyMapping' id '61c29ad0-e2a6-40af-8360-24952a5e6633' date '8 June 2012' time '8:35:55 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.6' message '1st version where list mapping works on some simple examples' id 'e3250e47-9c16-461e-8d2e-e8031e4cc2be' date '8 June 2012' time '4:40:26 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.5' message 'introduced NeoJSONMapper1st simplified version of NeoJSONReader>>#nextAs:' id '8a4a2338-c728-4ec5-bae9-8232abd6d7f6' date '7 June 2012' time '3:52:29 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.4' message '1st version with working object mapping for writer' id '0208c7c7-3ab1-4081-9061-9c6ca9d7e7cf' date '6 June 2012' time '8:47:04 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.3' message 'added more tests and a simple benchmark' id '2567c409-eb97-428e-a865-e6d078d23dff' date '4 June 2012' time '6:52:34 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.2' message 'first simple version of NeoJSONWriter' id '7e6474b7-70ed-4cb0-8348-05adddc17853' date '3 June 2012' time '7:57:41 pm' author 'SvenVanCaekenberghe' ancestors ((name 'Neo-JSON-Core-SvenVanCaekenberghe.1' message 'first simple version of NeoJSONReader' id 'e0039613-c57d-47ae-8838-db64917ca722' date '2 June 2012' time '9:59:42 pm' author 'SvenVanCaekenberghe' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Neo-JSON-Core-SvenVanCaekenberghe.43' message 'Added NeoJSONExamplesTests with #testPoints and #testRectanglePointsChanged NeoJSONObjectMapping #mapAccessors: #mapAllInstVars #mapInstVars and #mapInstVars: to return a collection of the generated mappingsThanks Juraj Kubelka !' id 'aa59f5b6-0310-0d00-8c5f-00ce0702b82a' date '6 July 2017' time '10:33:57.717792 am' author 'SvenVanCaekenberghe' ancestors ((id 'bbc9c32b-080d-0d00-a713-b0590189d909')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())